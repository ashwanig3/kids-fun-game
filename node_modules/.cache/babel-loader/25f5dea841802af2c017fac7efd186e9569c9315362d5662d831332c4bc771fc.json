{"ast":null,"code":"\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nvar react_1 = require(\"react\");\nvar cloneWithRef_1 = require(\"./utils/cloneWithRef\");\nfunction throwIfCompositeComponentElement(element) {\n  // Custom components can no longer be wrapped directly in React DnD 2.0\n  // so that we don't need to depend on findDOMNode() from react-dom.\n  if (typeof element.type === 'string') {\n    return;\n  }\n  var displayName = element.type.displayName || element.type.name || 'the component';\n  throw new Error('Only native element nodes can now be passed to React DnD connectors.' + (\"You can either wrap \" + displayName + \" into a <div>, or turn it into a \") + 'drag source or a drop target itself.');\n}\nfunction wrapHookToRecognizeElement(hook) {\n  return function (elementOrNode, options) {\n    if (elementOrNode === void 0) {\n      elementOrNode = null;\n    }\n    if (options === void 0) {\n      options = null;\n    }\n    // When passed a node, call the hook straight away.\n    if (!react_1.isValidElement(elementOrNode)) {\n      var node = elementOrNode;\n      hook(node, options);\n      return undefined;\n    }\n    // If passed a ReactElement, clone it and attach this function as a ref.\n    // This helps us achieve a neat API where user doesn't even know that refs\n    // are being used under the hood.\n    var element = elementOrNode;\n    throwIfCompositeComponentElement(element);\n    // When no options are passed, use the hook directly\n    var ref = options ? function (node) {\n      return hook(node, options);\n    } : hook;\n    return cloneWithRef_1.default(element, ref);\n  };\n}\nfunction wrapConnectorHooks(hooks) {\n  var wrappedHooks = {};\n  Object.keys(hooks).forEach(function (key) {\n    var hook = hooks[key];\n    var wrappedHook = wrapHookToRecognizeElement(hook);\n    wrappedHooks[key] = function () {\n      return wrappedHook;\n    };\n  });\n  return wrappedHooks;\n}\nexports.default = wrapConnectorHooks;","map":{"version":3,"names":["Object","defineProperty","exports","value","react_1","require","cloneWithRef_1","throwIfCompositeComponentElement","element","type","displayName","name","Error","wrapHookToRecognizeElement","hook","elementOrNode","options","isValidElement","node","undefined","ref","default","wrapConnectorHooks","hooks","wrappedHooks","keys","forEach","key","wrappedHook"],"sources":["/Users/vishalgoswami/Documents/work/my-repo/kids-fun-game/node_modules/.pnpm/react-dnd@6.0.0_react@18.3.1/node_modules/react-dnd/lib/wrapConnectorHooks.js"],"sourcesContent":["\"use strict\";\nObject.defineProperty(exports, \"__esModule\", { value: true });\nvar react_1 = require(\"react\");\nvar cloneWithRef_1 = require(\"./utils/cloneWithRef\");\nfunction throwIfCompositeComponentElement(element) {\n    // Custom components can no longer be wrapped directly in React DnD 2.0\n    // so that we don't need to depend on findDOMNode() from react-dom.\n    if (typeof element.type === 'string') {\n        return;\n    }\n    var displayName = element.type.displayName || element.type.name || 'the component';\n    throw new Error('Only native element nodes can now be passed to React DnD connectors.' +\n        (\"You can either wrap \" + displayName + \" into a <div>, or turn it into a \") +\n        'drag source or a drop target itself.');\n}\nfunction wrapHookToRecognizeElement(hook) {\n    return function (elementOrNode, options) {\n        if (elementOrNode === void 0) { elementOrNode = null; }\n        if (options === void 0) { options = null; }\n        // When passed a node, call the hook straight away.\n        if (!react_1.isValidElement(elementOrNode)) {\n            var node = elementOrNode;\n            hook(node, options);\n            return undefined;\n        }\n        // If passed a ReactElement, clone it and attach this function as a ref.\n        // This helps us achieve a neat API where user doesn't even know that refs\n        // are being used under the hood.\n        var element = elementOrNode;\n        throwIfCompositeComponentElement(element);\n        // When no options are passed, use the hook directly\n        var ref = options ? function (node) { return hook(node, options); } : hook;\n        return cloneWithRef_1.default(element, ref);\n    };\n}\nfunction wrapConnectorHooks(hooks) {\n    var wrappedHooks = {};\n    Object.keys(hooks).forEach(function (key) {\n        var hook = hooks[key];\n        var wrappedHook = wrapHookToRecognizeElement(hook);\n        wrappedHooks[key] = function () { return wrappedHook; };\n    });\n    return wrappedHooks;\n}\nexports.default = wrapConnectorHooks;\n"],"mappings":"AAAA,YAAY;;AACZA,MAAM,CAACC,cAAc,CAACC,OAAO,EAAE,YAAY,EAAE;EAAEC,KAAK,EAAE;AAAK,CAAC,CAAC;AAC7D,IAAIC,OAAO,GAAGC,OAAO,CAAC,OAAO,CAAC;AAC9B,IAAIC,cAAc,GAAGD,OAAO,CAAC,sBAAsB,CAAC;AACpD,SAASE,gCAAgCA,CAACC,OAAO,EAAE;EAC/C;EACA;EACA,IAAI,OAAOA,OAAO,CAACC,IAAI,KAAK,QAAQ,EAAE;IAClC;EACJ;EACA,IAAIC,WAAW,GAAGF,OAAO,CAACC,IAAI,CAACC,WAAW,IAAIF,OAAO,CAACC,IAAI,CAACE,IAAI,IAAI,eAAe;EAClF,MAAM,IAAIC,KAAK,CAAC,sEAAsE,IACjF,sBAAsB,GAAGF,WAAW,GAAG,mCAAmC,CAAC,GAC5E,sCAAsC,CAAC;AAC/C;AACA,SAASG,0BAA0BA,CAACC,IAAI,EAAE;EACtC,OAAO,UAAUC,aAAa,EAAEC,OAAO,EAAE;IACrC,IAAID,aAAa,KAAK,KAAK,CAAC,EAAE;MAAEA,aAAa,GAAG,IAAI;IAAE;IACtD,IAAIC,OAAO,KAAK,KAAK,CAAC,EAAE;MAAEA,OAAO,GAAG,IAAI;IAAE;IAC1C;IACA,IAAI,CAACZ,OAAO,CAACa,cAAc,CAACF,aAAa,CAAC,EAAE;MACxC,IAAIG,IAAI,GAAGH,aAAa;MACxBD,IAAI,CAACI,IAAI,EAAEF,OAAO,CAAC;MACnB,OAAOG,SAAS;IACpB;IACA;IACA;IACA;IACA,IAAIX,OAAO,GAAGO,aAAa;IAC3BR,gCAAgC,CAACC,OAAO,CAAC;IACzC;IACA,IAAIY,GAAG,GAAGJ,OAAO,GAAG,UAAUE,IAAI,EAAE;MAAE,OAAOJ,IAAI,CAACI,IAAI,EAAEF,OAAO,CAAC;IAAE,CAAC,GAAGF,IAAI;IAC1E,OAAOR,cAAc,CAACe,OAAO,CAACb,OAAO,EAAEY,GAAG,CAAC;EAC/C,CAAC;AACL;AACA,SAASE,kBAAkBA,CAACC,KAAK,EAAE;EAC/B,IAAIC,YAAY,GAAG,CAAC,CAAC;EACrBxB,MAAM,CAACyB,IAAI,CAACF,KAAK,CAAC,CAACG,OAAO,CAAC,UAAUC,GAAG,EAAE;IACtC,IAAIb,IAAI,GAAGS,KAAK,CAACI,GAAG,CAAC;IACrB,IAAIC,WAAW,GAAGf,0BAA0B,CAACC,IAAI,CAAC;IAClDU,YAAY,CAACG,GAAG,CAAC,GAAG,YAAY;MAAE,OAAOC,WAAW;IAAE,CAAC;EAC3D,CAAC,CAAC;EACF,OAAOJ,YAAY;AACvB;AACAtB,OAAO,CAACmB,OAAO,GAAGC,kBAAkB","ignoreList":[]},"metadata":{},"sourceType":"script","externalDependencies":[]}