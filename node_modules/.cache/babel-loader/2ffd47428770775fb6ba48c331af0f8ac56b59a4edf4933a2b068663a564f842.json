{"ast":null,"code":"\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nvar registry_1 = require(\"./actions/registry\");\nvar getNextUniqueId_1 = require(\"./utils/getNextUniqueId\");\nvar interfaces_1 = require(\"./interfaces\");\nvar contracts_1 = require(\"./contracts\");\nvar invariant = require('invariant');\nvar asap = require('asap');\nfunction getNextHandlerId(role) {\n  var id = getNextUniqueId_1.default().toString();\n  switch (role) {\n    case interfaces_1.HandlerRole.SOURCE:\n      return \"S\" + id;\n    case interfaces_1.HandlerRole.TARGET:\n      return \"T\" + id;\n    default:\n      throw new Error(\"Unknown Handler Role: \" + role);\n  }\n}\nfunction parseRoleFromHandlerId(handlerId) {\n  switch (handlerId[0]) {\n    case 'S':\n      return interfaces_1.HandlerRole.SOURCE;\n    case 'T':\n      return interfaces_1.HandlerRole.TARGET;\n    default:\n      invariant(false, \"Cannot parse handler ID: \" + handlerId);\n  }\n}\nfunction mapContainsValue(map, searchValue) {\n  var entries = map.entries();\n  var isDone = false;\n  do {\n    var _a = entries.next(),\n      done = _a.done,\n      _b = _a.value,\n      value = _b[1];\n    if (value === searchValue) {\n      return true;\n    }\n    isDone = done;\n  } while (!isDone);\n  return false;\n}\nvar HandlerRegistryImpl = /** @class */function () {\n  function HandlerRegistryImpl(store) {\n    this.store = store;\n    this.types = new Map();\n    this.dragSources = new Map();\n    this.dropTargets = new Map();\n    this.pinnedSourceId = null;\n    this.pinnedSource = null;\n  }\n  HandlerRegistryImpl.prototype.addSource = function (type, source) {\n    contracts_1.validateType(type);\n    contracts_1.validateSourceContract(source);\n    var sourceId = this.addHandler(interfaces_1.HandlerRole.SOURCE, type, source);\n    this.store.dispatch(registry_1.addSource(sourceId));\n    return sourceId;\n  };\n  HandlerRegistryImpl.prototype.addTarget = function (type, target) {\n    contracts_1.validateType(type, true);\n    contracts_1.validateTargetContract(target);\n    var targetId = this.addHandler(interfaces_1.HandlerRole.TARGET, type, target);\n    this.store.dispatch(registry_1.addTarget(targetId));\n    return targetId;\n  };\n  HandlerRegistryImpl.prototype.containsHandler = function (handler) {\n    return mapContainsValue(this.dragSources, handler) || mapContainsValue(this.dropTargets, handler);\n  };\n  HandlerRegistryImpl.prototype.getSource = function (sourceId, includePinned) {\n    if (includePinned === void 0) {\n      includePinned = false;\n    }\n    invariant(this.isSourceId(sourceId), 'Expected a valid source ID.');\n    var isPinned = includePinned && sourceId === this.pinnedSourceId;\n    var source = isPinned ? this.pinnedSource : this.dragSources.get(sourceId);\n    return source;\n  };\n  HandlerRegistryImpl.prototype.getTarget = function (targetId) {\n    invariant(this.isTargetId(targetId), 'Expected a valid target ID.');\n    return this.dropTargets.get(targetId);\n  };\n  HandlerRegistryImpl.prototype.getSourceType = function (sourceId) {\n    invariant(this.isSourceId(sourceId), 'Expected a valid source ID.');\n    return this.types.get(sourceId);\n  };\n  HandlerRegistryImpl.prototype.getTargetType = function (targetId) {\n    invariant(this.isTargetId(targetId), 'Expected a valid target ID.');\n    return this.types.get(targetId);\n  };\n  HandlerRegistryImpl.prototype.isSourceId = function (handlerId) {\n    var role = parseRoleFromHandlerId(handlerId);\n    return role === interfaces_1.HandlerRole.SOURCE;\n  };\n  HandlerRegistryImpl.prototype.isTargetId = function (handlerId) {\n    var role = parseRoleFromHandlerId(handlerId);\n    return role === interfaces_1.HandlerRole.TARGET;\n  };\n  HandlerRegistryImpl.prototype.removeSource = function (sourceId) {\n    var _this = this;\n    invariant(this.getSource(sourceId), 'Expected an existing source.');\n    this.store.dispatch(registry_1.removeSource(sourceId));\n    asap(function () {\n      _this.dragSources.delete(sourceId);\n      _this.types.delete(sourceId);\n    });\n  };\n  HandlerRegistryImpl.prototype.removeTarget = function (targetId) {\n    invariant(this.getTarget(targetId), 'Expected an existing target.');\n    this.store.dispatch(registry_1.removeTarget(targetId));\n    this.dropTargets.delete(targetId);\n    this.types.delete(targetId);\n  };\n  HandlerRegistryImpl.prototype.pinSource = function (sourceId) {\n    var source = this.getSource(sourceId);\n    invariant(source, 'Expected an existing source.');\n    this.pinnedSourceId = sourceId;\n    this.pinnedSource = source;\n  };\n  HandlerRegistryImpl.prototype.unpinSource = function () {\n    invariant(this.pinnedSource, 'No source is pinned at the time.');\n    this.pinnedSourceId = null;\n    this.pinnedSource = null;\n  };\n  HandlerRegistryImpl.prototype.addHandler = function (role, type, handler) {\n    var id = getNextHandlerId(role);\n    this.types.set(id, type);\n    if (role === interfaces_1.HandlerRole.SOURCE) {\n      this.dragSources.set(id, handler);\n    } else if (role === interfaces_1.HandlerRole.TARGET) {\n      this.dropTargets.set(id, handler);\n    }\n    return id;\n  };\n  return HandlerRegistryImpl;\n}();\nexports.default = HandlerRegistryImpl;","map":{"version":3,"names":["Object","defineProperty","exports","value","registry_1","require","getNextUniqueId_1","interfaces_1","contracts_1","invariant","asap","getNextHandlerId","role","id","default","toString","HandlerRole","SOURCE","TARGET","Error","parseRoleFromHandlerId","handlerId","mapContainsValue","map","searchValue","entries","isDone","_a","next","done","_b","HandlerRegistryImpl","store","types","Map","dragSources","dropTargets","pinnedSourceId","pinnedSource","prototype","addSource","type","source","validateType","validateSourceContract","sourceId","addHandler","dispatch","addTarget","target","validateTargetContract","targetId","containsHandler","handler","getSource","includePinned","isSourceId","isPinned","get","getTarget","isTargetId","getSourceType","getTargetType","removeSource","_this","delete","removeTarget","pinSource","unpinSource","set"],"sources":["/Users/vishalgoswami/Documents/work/my-repo/kids-fun-game/node_modules/.pnpm/dnd-core@6.0.0/node_modules/dnd-core/lib/HandlerRegistryImpl.js"],"sourcesContent":["\"use strict\";\nObject.defineProperty(exports, \"__esModule\", { value: true });\nvar registry_1 = require(\"./actions/registry\");\nvar getNextUniqueId_1 = require(\"./utils/getNextUniqueId\");\nvar interfaces_1 = require(\"./interfaces\");\nvar contracts_1 = require(\"./contracts\");\nvar invariant = require('invariant');\nvar asap = require('asap');\nfunction getNextHandlerId(role) {\n    var id = getNextUniqueId_1.default().toString();\n    switch (role) {\n        case interfaces_1.HandlerRole.SOURCE:\n            return \"S\" + id;\n        case interfaces_1.HandlerRole.TARGET:\n            return \"T\" + id;\n        default:\n            throw new Error(\"Unknown Handler Role: \" + role);\n    }\n}\nfunction parseRoleFromHandlerId(handlerId) {\n    switch (handlerId[0]) {\n        case 'S':\n            return interfaces_1.HandlerRole.SOURCE;\n        case 'T':\n            return interfaces_1.HandlerRole.TARGET;\n        default:\n            invariant(false, \"Cannot parse handler ID: \" + handlerId);\n    }\n}\nfunction mapContainsValue(map, searchValue) {\n    var entries = map.entries();\n    var isDone = false;\n    do {\n        var _a = entries.next(), done = _a.done, _b = _a.value, value = _b[1];\n        if (value === searchValue) {\n            return true;\n        }\n        isDone = done;\n    } while (!isDone);\n    return false;\n}\nvar HandlerRegistryImpl = /** @class */ (function () {\n    function HandlerRegistryImpl(store) {\n        this.store = store;\n        this.types = new Map();\n        this.dragSources = new Map();\n        this.dropTargets = new Map();\n        this.pinnedSourceId = null;\n        this.pinnedSource = null;\n    }\n    HandlerRegistryImpl.prototype.addSource = function (type, source) {\n        contracts_1.validateType(type);\n        contracts_1.validateSourceContract(source);\n        var sourceId = this.addHandler(interfaces_1.HandlerRole.SOURCE, type, source);\n        this.store.dispatch(registry_1.addSource(sourceId));\n        return sourceId;\n    };\n    HandlerRegistryImpl.prototype.addTarget = function (type, target) {\n        contracts_1.validateType(type, true);\n        contracts_1.validateTargetContract(target);\n        var targetId = this.addHandler(interfaces_1.HandlerRole.TARGET, type, target);\n        this.store.dispatch(registry_1.addTarget(targetId));\n        return targetId;\n    };\n    HandlerRegistryImpl.prototype.containsHandler = function (handler) {\n        return (mapContainsValue(this.dragSources, handler) ||\n            mapContainsValue(this.dropTargets, handler));\n    };\n    HandlerRegistryImpl.prototype.getSource = function (sourceId, includePinned) {\n        if (includePinned === void 0) { includePinned = false; }\n        invariant(this.isSourceId(sourceId), 'Expected a valid source ID.');\n        var isPinned = includePinned && sourceId === this.pinnedSourceId;\n        var source = isPinned ? this.pinnedSource : this.dragSources.get(sourceId);\n        return source;\n    };\n    HandlerRegistryImpl.prototype.getTarget = function (targetId) {\n        invariant(this.isTargetId(targetId), 'Expected a valid target ID.');\n        return this.dropTargets.get(targetId);\n    };\n    HandlerRegistryImpl.prototype.getSourceType = function (sourceId) {\n        invariant(this.isSourceId(sourceId), 'Expected a valid source ID.');\n        return this.types.get(sourceId);\n    };\n    HandlerRegistryImpl.prototype.getTargetType = function (targetId) {\n        invariant(this.isTargetId(targetId), 'Expected a valid target ID.');\n        return this.types.get(targetId);\n    };\n    HandlerRegistryImpl.prototype.isSourceId = function (handlerId) {\n        var role = parseRoleFromHandlerId(handlerId);\n        return role === interfaces_1.HandlerRole.SOURCE;\n    };\n    HandlerRegistryImpl.prototype.isTargetId = function (handlerId) {\n        var role = parseRoleFromHandlerId(handlerId);\n        return role === interfaces_1.HandlerRole.TARGET;\n    };\n    HandlerRegistryImpl.prototype.removeSource = function (sourceId) {\n        var _this = this;\n        invariant(this.getSource(sourceId), 'Expected an existing source.');\n        this.store.dispatch(registry_1.removeSource(sourceId));\n        asap(function () {\n            _this.dragSources.delete(sourceId);\n            _this.types.delete(sourceId);\n        });\n    };\n    HandlerRegistryImpl.prototype.removeTarget = function (targetId) {\n        invariant(this.getTarget(targetId), 'Expected an existing target.');\n        this.store.dispatch(registry_1.removeTarget(targetId));\n        this.dropTargets.delete(targetId);\n        this.types.delete(targetId);\n    };\n    HandlerRegistryImpl.prototype.pinSource = function (sourceId) {\n        var source = this.getSource(sourceId);\n        invariant(source, 'Expected an existing source.');\n        this.pinnedSourceId = sourceId;\n        this.pinnedSource = source;\n    };\n    HandlerRegistryImpl.prototype.unpinSource = function () {\n        invariant(this.pinnedSource, 'No source is pinned at the time.');\n        this.pinnedSourceId = null;\n        this.pinnedSource = null;\n    };\n    HandlerRegistryImpl.prototype.addHandler = function (role, type, handler) {\n        var id = getNextHandlerId(role);\n        this.types.set(id, type);\n        if (role === interfaces_1.HandlerRole.SOURCE) {\n            this.dragSources.set(id, handler);\n        }\n        else if (role === interfaces_1.HandlerRole.TARGET) {\n            this.dropTargets.set(id, handler);\n        }\n        return id;\n    };\n    return HandlerRegistryImpl;\n}());\nexports.default = HandlerRegistryImpl;\n"],"mappings":"AAAA,YAAY;;AACZA,MAAM,CAACC,cAAc,CAACC,OAAO,EAAE,YAAY,EAAE;EAAEC,KAAK,EAAE;AAAK,CAAC,CAAC;AAC7D,IAAIC,UAAU,GAAGC,OAAO,CAAC,oBAAoB,CAAC;AAC9C,IAAIC,iBAAiB,GAAGD,OAAO,CAAC,yBAAyB,CAAC;AAC1D,IAAIE,YAAY,GAAGF,OAAO,CAAC,cAAc,CAAC;AAC1C,IAAIG,WAAW,GAAGH,OAAO,CAAC,aAAa,CAAC;AACxC,IAAII,SAAS,GAAGJ,OAAO,CAAC,WAAW,CAAC;AACpC,IAAIK,IAAI,GAAGL,OAAO,CAAC,MAAM,CAAC;AAC1B,SAASM,gBAAgBA,CAACC,IAAI,EAAE;EAC5B,IAAIC,EAAE,GAAGP,iBAAiB,CAACQ,OAAO,CAAC,CAAC,CAACC,QAAQ,CAAC,CAAC;EAC/C,QAAQH,IAAI;IACR,KAAKL,YAAY,CAACS,WAAW,CAACC,MAAM;MAChC,OAAO,GAAG,GAAGJ,EAAE;IACnB,KAAKN,YAAY,CAACS,WAAW,CAACE,MAAM;MAChC,OAAO,GAAG,GAAGL,EAAE;IACnB;MACI,MAAM,IAAIM,KAAK,CAAC,wBAAwB,GAAGP,IAAI,CAAC;EACxD;AACJ;AACA,SAASQ,sBAAsBA,CAACC,SAAS,EAAE;EACvC,QAAQA,SAAS,CAAC,CAAC,CAAC;IAChB,KAAK,GAAG;MACJ,OAAOd,YAAY,CAACS,WAAW,CAACC,MAAM;IAC1C,KAAK,GAAG;MACJ,OAAOV,YAAY,CAACS,WAAW,CAACE,MAAM;IAC1C;MACIT,SAAS,CAAC,KAAK,EAAE,2BAA2B,GAAGY,SAAS,CAAC;EACjE;AACJ;AACA,SAASC,gBAAgBA,CAACC,GAAG,EAAEC,WAAW,EAAE;EACxC,IAAIC,OAAO,GAAGF,GAAG,CAACE,OAAO,CAAC,CAAC;EAC3B,IAAIC,MAAM,GAAG,KAAK;EAClB,GAAG;IACC,IAAIC,EAAE,GAAGF,OAAO,CAACG,IAAI,CAAC,CAAC;MAAEC,IAAI,GAAGF,EAAE,CAACE,IAAI;MAAEC,EAAE,GAAGH,EAAE,CAACxB,KAAK;MAAEA,KAAK,GAAG2B,EAAE,CAAC,CAAC,CAAC;IACrE,IAAI3B,KAAK,KAAKqB,WAAW,EAAE;MACvB,OAAO,IAAI;IACf;IACAE,MAAM,GAAGG,IAAI;EACjB,CAAC,QAAQ,CAACH,MAAM;EAChB,OAAO,KAAK;AAChB;AACA,IAAIK,mBAAmB,GAAG,aAAe,YAAY;EACjD,SAASA,mBAAmBA,CAACC,KAAK,EAAE;IAChC,IAAI,CAACA,KAAK,GAAGA,KAAK;IAClB,IAAI,CAACC,KAAK,GAAG,IAAIC,GAAG,CAAC,CAAC;IACtB,IAAI,CAACC,WAAW,GAAG,IAAID,GAAG,CAAC,CAAC;IAC5B,IAAI,CAACE,WAAW,GAAG,IAAIF,GAAG,CAAC,CAAC;IAC5B,IAAI,CAACG,cAAc,GAAG,IAAI;IAC1B,IAAI,CAACC,YAAY,GAAG,IAAI;EAC5B;EACAP,mBAAmB,CAACQ,SAAS,CAACC,SAAS,GAAG,UAAUC,IAAI,EAAEC,MAAM,EAAE;IAC9DlC,WAAW,CAACmC,YAAY,CAACF,IAAI,CAAC;IAC9BjC,WAAW,CAACoC,sBAAsB,CAACF,MAAM,CAAC;IAC1C,IAAIG,QAAQ,GAAG,IAAI,CAACC,UAAU,CAACvC,YAAY,CAACS,WAAW,CAACC,MAAM,EAAEwB,IAAI,EAAEC,MAAM,CAAC;IAC7E,IAAI,CAACV,KAAK,CAACe,QAAQ,CAAC3C,UAAU,CAACoC,SAAS,CAACK,QAAQ,CAAC,CAAC;IACnD,OAAOA,QAAQ;EACnB,CAAC;EACDd,mBAAmB,CAACQ,SAAS,CAACS,SAAS,GAAG,UAAUP,IAAI,EAAEQ,MAAM,EAAE;IAC9DzC,WAAW,CAACmC,YAAY,CAACF,IAAI,EAAE,IAAI,CAAC;IACpCjC,WAAW,CAAC0C,sBAAsB,CAACD,MAAM,CAAC;IAC1C,IAAIE,QAAQ,GAAG,IAAI,CAACL,UAAU,CAACvC,YAAY,CAACS,WAAW,CAACE,MAAM,EAAEuB,IAAI,EAAEQ,MAAM,CAAC;IAC7E,IAAI,CAACjB,KAAK,CAACe,QAAQ,CAAC3C,UAAU,CAAC4C,SAAS,CAACG,QAAQ,CAAC,CAAC;IACnD,OAAOA,QAAQ;EACnB,CAAC;EACDpB,mBAAmB,CAACQ,SAAS,CAACa,eAAe,GAAG,UAAUC,OAAO,EAAE;IAC/D,OAAQ/B,gBAAgB,CAAC,IAAI,CAACa,WAAW,EAAEkB,OAAO,CAAC,IAC/C/B,gBAAgB,CAAC,IAAI,CAACc,WAAW,EAAEiB,OAAO,CAAC;EACnD,CAAC;EACDtB,mBAAmB,CAACQ,SAAS,CAACe,SAAS,GAAG,UAAUT,QAAQ,EAAEU,aAAa,EAAE;IACzE,IAAIA,aAAa,KAAK,KAAK,CAAC,EAAE;MAAEA,aAAa,GAAG,KAAK;IAAE;IACvD9C,SAAS,CAAC,IAAI,CAAC+C,UAAU,CAACX,QAAQ,CAAC,EAAE,6BAA6B,CAAC;IACnE,IAAIY,QAAQ,GAAGF,aAAa,IAAIV,QAAQ,KAAK,IAAI,CAACR,cAAc;IAChE,IAAIK,MAAM,GAAGe,QAAQ,GAAG,IAAI,CAACnB,YAAY,GAAG,IAAI,CAACH,WAAW,CAACuB,GAAG,CAACb,QAAQ,CAAC;IAC1E,OAAOH,MAAM;EACjB,CAAC;EACDX,mBAAmB,CAACQ,SAAS,CAACoB,SAAS,GAAG,UAAUR,QAAQ,EAAE;IAC1D1C,SAAS,CAAC,IAAI,CAACmD,UAAU,CAACT,QAAQ,CAAC,EAAE,6BAA6B,CAAC;IACnE,OAAO,IAAI,CAACf,WAAW,CAACsB,GAAG,CAACP,QAAQ,CAAC;EACzC,CAAC;EACDpB,mBAAmB,CAACQ,SAAS,CAACsB,aAAa,GAAG,UAAUhB,QAAQ,EAAE;IAC9DpC,SAAS,CAAC,IAAI,CAAC+C,UAAU,CAACX,QAAQ,CAAC,EAAE,6BAA6B,CAAC;IACnE,OAAO,IAAI,CAACZ,KAAK,CAACyB,GAAG,CAACb,QAAQ,CAAC;EACnC,CAAC;EACDd,mBAAmB,CAACQ,SAAS,CAACuB,aAAa,GAAG,UAAUX,QAAQ,EAAE;IAC9D1C,SAAS,CAAC,IAAI,CAACmD,UAAU,CAACT,QAAQ,CAAC,EAAE,6BAA6B,CAAC;IACnE,OAAO,IAAI,CAAClB,KAAK,CAACyB,GAAG,CAACP,QAAQ,CAAC;EACnC,CAAC;EACDpB,mBAAmB,CAACQ,SAAS,CAACiB,UAAU,GAAG,UAAUnC,SAAS,EAAE;IAC5D,IAAIT,IAAI,GAAGQ,sBAAsB,CAACC,SAAS,CAAC;IAC5C,OAAOT,IAAI,KAAKL,YAAY,CAACS,WAAW,CAACC,MAAM;EACnD,CAAC;EACDc,mBAAmB,CAACQ,SAAS,CAACqB,UAAU,GAAG,UAAUvC,SAAS,EAAE;IAC5D,IAAIT,IAAI,GAAGQ,sBAAsB,CAACC,SAAS,CAAC;IAC5C,OAAOT,IAAI,KAAKL,YAAY,CAACS,WAAW,CAACE,MAAM;EACnD,CAAC;EACDa,mBAAmB,CAACQ,SAAS,CAACwB,YAAY,GAAG,UAAUlB,QAAQ,EAAE;IAC7D,IAAImB,KAAK,GAAG,IAAI;IAChBvD,SAAS,CAAC,IAAI,CAAC6C,SAAS,CAACT,QAAQ,CAAC,EAAE,8BAA8B,CAAC;IACnE,IAAI,CAACb,KAAK,CAACe,QAAQ,CAAC3C,UAAU,CAAC2D,YAAY,CAAClB,QAAQ,CAAC,CAAC;IACtDnC,IAAI,CAAC,YAAY;MACbsD,KAAK,CAAC7B,WAAW,CAAC8B,MAAM,CAACpB,QAAQ,CAAC;MAClCmB,KAAK,CAAC/B,KAAK,CAACgC,MAAM,CAACpB,QAAQ,CAAC;IAChC,CAAC,CAAC;EACN,CAAC;EACDd,mBAAmB,CAACQ,SAAS,CAAC2B,YAAY,GAAG,UAAUf,QAAQ,EAAE;IAC7D1C,SAAS,CAAC,IAAI,CAACkD,SAAS,CAACR,QAAQ,CAAC,EAAE,8BAA8B,CAAC;IACnE,IAAI,CAACnB,KAAK,CAACe,QAAQ,CAAC3C,UAAU,CAAC8D,YAAY,CAACf,QAAQ,CAAC,CAAC;IACtD,IAAI,CAACf,WAAW,CAAC6B,MAAM,CAACd,QAAQ,CAAC;IACjC,IAAI,CAAClB,KAAK,CAACgC,MAAM,CAACd,QAAQ,CAAC;EAC/B,CAAC;EACDpB,mBAAmB,CAACQ,SAAS,CAAC4B,SAAS,GAAG,UAAUtB,QAAQ,EAAE;IAC1D,IAAIH,MAAM,GAAG,IAAI,CAACY,SAAS,CAACT,QAAQ,CAAC;IACrCpC,SAAS,CAACiC,MAAM,EAAE,8BAA8B,CAAC;IACjD,IAAI,CAACL,cAAc,GAAGQ,QAAQ;IAC9B,IAAI,CAACP,YAAY,GAAGI,MAAM;EAC9B,CAAC;EACDX,mBAAmB,CAACQ,SAAS,CAAC6B,WAAW,GAAG,YAAY;IACpD3D,SAAS,CAAC,IAAI,CAAC6B,YAAY,EAAE,kCAAkC,CAAC;IAChE,IAAI,CAACD,cAAc,GAAG,IAAI;IAC1B,IAAI,CAACC,YAAY,GAAG,IAAI;EAC5B,CAAC;EACDP,mBAAmB,CAACQ,SAAS,CAACO,UAAU,GAAG,UAAUlC,IAAI,EAAE6B,IAAI,EAAEY,OAAO,EAAE;IACtE,IAAIxC,EAAE,GAAGF,gBAAgB,CAACC,IAAI,CAAC;IAC/B,IAAI,CAACqB,KAAK,CAACoC,GAAG,CAACxD,EAAE,EAAE4B,IAAI,CAAC;IACxB,IAAI7B,IAAI,KAAKL,YAAY,CAACS,WAAW,CAACC,MAAM,EAAE;MAC1C,IAAI,CAACkB,WAAW,CAACkC,GAAG,CAACxD,EAAE,EAAEwC,OAAO,CAAC;IACrC,CAAC,MACI,IAAIzC,IAAI,KAAKL,YAAY,CAACS,WAAW,CAACE,MAAM,EAAE;MAC/C,IAAI,CAACkB,WAAW,CAACiC,GAAG,CAACxD,EAAE,EAAEwC,OAAO,CAAC;IACrC;IACA,OAAOxC,EAAE;EACb,CAAC;EACD,OAAOkB,mBAAmB;AAC9B,CAAC,CAAC,CAAE;AACJ7B,OAAO,CAACY,OAAO,GAAGiB,mBAAmB","ignoreList":[]},"metadata":{},"sourceType":"script","externalDependencies":[]}